start	end	text
0	6000	Hello everyone, my name is Jesse Peterson and this is my CS470 Project 2 conference presentation.
6000	12000	So getting on with it, we have our agenda here is going to be talking about containerization orchestration,
12000	18000	the serverless cloud, cloud-based development principles in securing your cloud application.
18000	22000	So first, containerization and orchestration, the models we used.
22000	28000	So we used the re-platforming model where we integrated Lambda functions, DynamoDB, and the API gateway.
28000	35000	So on the other hand, there's lift and shift, which is where you will package a container in a Docker container
35000	42000	and you will lift it into the cloud. This is usually done on legacy applications where refactoring is useless.
42000	49000	So re-platforming is where you slightly modify in order to take advantage of cloud managed services,
49000	54000	for example, like our MongoDB and DynamoDB database.
54000	59000	And refactoring is a much more extensive approach where the application is redesigned.
59000	69000	This is usually to adopt the microservice architecture where the entire thing is broken down to take full utilization of the cloud.
69000	74000	So the tools used, we used two different tools here. We used Docker and Docker Compose.
74000	81000	Docker helps to package applications with their dependencies and containers.
81000	87000	One key feature is Docker's ability to build, ship, and run applications in isolated environments.
87000	92000	This allows us to keep our dependencies from interacting with the host machine's dependencies,
92000	96000	getting rid of the it works on my machine, but it doesn't work on yours issue.
96000	99000	So we also use Docker Compose, which is a Docker tool.
99000	104000	It allows us to manage multi-container Docker applications.
104000	108000	This is all done through a single Docker Compose file.
108000	110000	So why should we use Docker Compose?
110000	116000	Well, it simplifies the multi-container applications via a single YAML file.
119000	124000	It's also nice for testing applications that use multiple services.
124000	129000	Like in our case, we use MongoDB to communicate with ours.
129000	133000	And it's also very portable and reproducible.
133000	140000	You can upload your Compose file to a GitHub repo so your other developers can pull it.
140000	146000	And it also runs on Windows, Mac OS, and Linux platforms so you can develop across any platform you prefer.
146000	148000	So what's the serverless cloud?
148000	155000	So the serverless cloud allows, has the advantage of allowing developers to write and deploy code
155000	158000	without worrying about managing their underlying infrastructure.
158000	162000	Developers, this also creates faster development life cycles.
162000	167000	This is mostly due to the elimination of the need for infrastructure setup.
167000	171000	Serverless applications dynamically scale up and down depending on demand.
171000	179000	And they reduce operational overhead since there is no need to manage or maintain physical service operating systems or containers, clusters.
179000	182000	So what is S3 storage then?
182000	194000	So S3 storage, or a simplified storage service, is a cloud-based object storage service that is designed for scalability, durability, and accessibility.
194000	199000	S3 is a managed service where AWS handles infrastructure and everything.
199000	207000	With a significant amount of AWS data centers, this allows your data to be replicated to other regions, making it highly available and accessible.
207000	215000	On the other hand, local storage is limited to physical hardware, whereas cloud storage is not limited unless it's the price of the storage.
215000	220000	Finally, as mentioned earlier, local storage has no built-in remote accessibility.
220000	225000	Having an engineer come in to open your network up can lead to some vulnerabilities.
225000	228000	This is an example of what serverless looks like.
228000	231000	A user would connect to the API.
231000	233000	The API would route to a Lambda function.
233000	239000	The Lambda function would grab the data that it needs from the database, and then it would bring it back to the user.
239000	246000	This would scale up and down through this elastic hash model, depending on how many people are accessing the data.
246000	249000	So going on to the serverless API.
249000	254000	When using a serverless API, there is no server management required.
254000	261000	This enables developers to focus on writing and deploying an application without worrying about configuration of the network.
261000	271000	Serverless APIs dynamically scale depending on the number of requests, high availability during traffic spikes, and helps to prevent resource usage during low demand.
271000	278000	The cost is greatly reduced since you are built only on the actual utilization and not idle time.
278000	281000	So what are Lambda functions then?
281000	289000	Lambda function is a serverless service that runs code in response to events such as API requests.
289000	294000	Each function is designed to handle a specific task such as a CRUD operation.
294000	299000	In the API, this would be post, get, put, or patch, and delete.
299000	304000	Lambda functions have high integrations with other backend services like DynamoDB and S3.
304000	312000	And if you wanted to create a front-end and back-end website, you would first deploy the Lambda function and configure API gateway routes.
312000	314000	Then you would use S3 for hosting the front-end.
314000	318000	And third, you could use CORS to enable communication between front and back-ends.
318000	324000	And lastly, you'd want to make sure you secure your API endpoints with authentication.
324000	325000	How does the gateway work?
325000	326000	Well, here's an example.
326000	330000	So users would connect to the API gateway, and then it would connect to the backend.
330000	333000	The backend would grab the data and bring it back to the user.
333000	340000	Alternatively, internal developers can access the backend directly to manage anything that they need to.
340000	344000	Now we'll talk about MongoDB versus DynamoDB.
344000	348000	So MongoDB has a very flexible document-based schema.
348000	352000	It uses a JSON-like BSON format.
352000	358000	It allows for rich querying capabilities like geospatial queries, indexing, and text search.
358000	365000	This also allows for the filtering, sorting, and aggregation operations.
365000	367000	It uses a multi-table structure.
367000	373000	DynamoDB uses single-table structure, and it's optimized for fast key value and document-based storage.
373000	378000	It's limited to secondary indexes for querying as well.
378000	382000	Here's an example of what a DynamoDB table looks like.
382000	385000	As you can see, it is just one singular table.
385000	391000	All of the data is sorted via this primary key and the sorting key right here.
391000	394000	This is an example of the MongoDB table.
394000	398000	As you can see, they're all connected via holding each other's IDs.
398000	403000	As you can see, the customer ID right here is held in the orders customer ID field.
403000	406000	All right, cloud-based development principles.
406000	408000	Well, elasticity is a very big part of cloud.
408000	415000	This is where the cloud will scale up and down depending on the actual utilization.
415000	419000	And this brings us to our next topic, so pay-for-use model.
419000	425000	As you can see right here, in a cloud environment, you only pay for what you use.
425000	428000	As you can see, your consumption right here, you only pay for what you use.
428000	436000	In a VM, you pay for a capacity, which means that all of this red is wasted usage that you're paying for.
436000	438000	So what is autoscaling?
438000	444000	Autoscaling is something that helps us to achieve the build consumption on this side.
444000	452000	Users will connect to our website via the internet, where it will use a load balancer to scale up and down depending on demand.
452000	455000	Next, we'll talk about securing the cloud application.
455000	460000	So this is done through three main different ways, roles, policies, and API security.
460000	461000	So how do we prevent access?
461000	468000	So IAM roles and policies are used for granting permission for accessing cloud resources.
468000	474000	Policies are attached to roles that specify what actions are denied on a particular resource.
474000	480000	IAM is beneficial for developers since it gives an easy and centralized way to manage permissions,
480000	487000	enabling multi-factor authentication means users are required to identify themselves through two or more factors.
487000	492000	This usually consists of something they know like a password and something they have a code from an authenticator app.
492000	497000	This is important because it mitigates the risk of credentials becoming compromised.
497000	504000	Finally, applying least privileged principles means granting users and services the minimum permissions needed to perform the tasks.
504000	510000	The advantage of this is to reduce the surface for attack by limiting access to resources.
510000	515000	Additionally, this also mitigates the accidental or malicious misuse of privileges.
515000	522000	Luckily, AWS has a tool called AWS IAM access analyzer to identify any overly permissive rules.
522000	527000	Roles act as a container for permissions, as we mentioned earlier.
528000	534000	Custom policies are another way to define permissions in AWS.
534000	540000	While we didn't get to actually define them ourselves, Amazon provided them in the lab role right here.
540000	548000	These policies that are attached to our role allowed us to read our CRUD commands on our Dynamo database through our Lambda functions.
548000	554000	Finally, through API security, in order to secure the API with Lambda,
554000	559000	you can enable TLS, IAM authorizers, and restrict private access.
559000	574000	With connection between the Lambda and the database, you can opt for encrypting data transit using SSL and TLS, IAM, and using principle or least privilege, like I mentioned before.
574000	581000	Finally, securing your cloud with connection between Lambda and S3 through bucket security policies like the one that we see right here.
581000	585000	IAM role permissions and encrypting data.
585000	590000	Thank you for watching. I hope everything made sense to you.
590000	602000	We have gone over the containerization orchestration using Docker, using Docker Compose, the serverless cloud, Lambda functions, the S3 storage.
602000	610000	We talked about the serverless API, and we also talked about DynamoDB and how it compares to MongoDB.
610000	619000	We talked about the cloud-based development cycles, so pay for use and elasticity, and how to secure your cloud.
619000	622000	I hope all of this makes sense and helps you. Thank you.
