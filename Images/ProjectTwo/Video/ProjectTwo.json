{"text": " Hello everyone, my name is Jesse Peterson and this is my CS470 Project 2 conference presentation. So getting on with it, we have our agenda here is going to be talking about containerization orchestration, the serverless cloud, cloud-based development principles in securing your cloud application. So first, containerization and orchestration, the models we used. So we used the re-platforming model where we integrated Lambda functions, DynamoDB, and the API gateway. So on the other hand, there's lift and shift, which is where you will package a container in a Docker container and you will lift it into the cloud. This is usually done on legacy applications where refactoring is useless. So re-platforming is where you slightly modify in order to take advantage of cloud managed services, for example, like our MongoDB and DynamoDB database. And refactoring is a much more extensive approach where the application is redesigned. This is usually to adopt the microservice architecture where the entire thing is broken down to take full utilization of the cloud. So the tools used, we used two different tools here. We used Docker and Docker Compose. Docker helps to package applications with their dependencies and containers. One key feature is Docker's ability to build, ship, and run applications in isolated environments. This allows us to keep our dependencies from interacting with the host machine's dependencies, getting rid of the it works on my machine, but it doesn't work on yours issue. So we also use Docker Compose, which is a Docker tool. It allows us to manage multi-container Docker applications. This is all done through a single Docker Compose file. So why should we use Docker Compose? Well, it simplifies the multi-container applications via a single YAML file. It's also nice for testing applications that use multiple services. Like in our case, we use MongoDB to communicate with ours. And it's also very portable and reproducible. You can upload your Compose file to a GitHub repo so your other developers can pull it. And it also runs on Windows, Mac OS, and Linux platforms so you can develop across any platform you prefer. So what's the serverless cloud? So the serverless cloud allows, has the advantage of allowing developers to write and deploy code without worrying about managing their underlying infrastructure. Developers, this also creates faster development life cycles. This is mostly due to the elimination of the need for infrastructure setup. Serverless applications dynamically scale up and down depending on demand. And they reduce operational overhead since there is no need to manage or maintain physical service operating systems or containers, clusters. So what is S3 storage then? So S3 storage, or a simplified storage service, is a cloud-based object storage service that is designed for scalability, durability, and accessibility. S3 is a managed service where AWS handles infrastructure and everything. With a significant amount of AWS data centers, this allows your data to be replicated to other regions, making it highly available and accessible. On the other hand, local storage is limited to physical hardware, whereas cloud storage is not limited unless it's the price of the storage. Finally, as mentioned earlier, local storage has no built-in remote accessibility. Having an engineer come in to open your network up can lead to some vulnerabilities. This is an example of what serverless looks like. A user would connect to the API. The API would route to a Lambda function. The Lambda function would grab the data that it needs from the database, and then it would bring it back to the user. This would scale up and down through this elastic hash model, depending on how many people are accessing the data. So going on to the serverless API. When using a serverless API, there is no server management required. This enables developers to focus on writing and deploying an application without worrying about configuration of the network. Serverless APIs dynamically scale depending on the number of requests, high availability during traffic spikes, and helps to prevent resource usage during low demand. The cost is greatly reduced since you are built only on the actual utilization and not idle time. So what are Lambda functions then? Lambda function is a serverless service that runs code in response to events such as API requests. Each function is designed to handle a specific task such as a CRUD operation. In the API, this would be post, get, put, or patch, and delete. Lambda functions have high integrations with other backend services like DynamoDB and S3. And if you wanted to create a front-end and back-end website, you would first deploy the Lambda function and configure API gateway routes. Then you would use S3 for hosting the front-end. And third, you could use CORS to enable communication between front and back-ends. And lastly, you'd want to make sure you secure your API endpoints with authentication. How does the gateway work? Well, here's an example. So users would connect to the API gateway, and then it would connect to the backend. The backend would grab the data and bring it back to the user. Alternatively, internal developers can access the backend directly to manage anything that they need to. Now we'll talk about MongoDB versus DynamoDB. So MongoDB has a very flexible document-based schema. It uses a JSON-like BSON format. It allows for rich querying capabilities like geospatial queries, indexing, and text search. This also allows for the filtering, sorting, and aggregation operations. It uses a multi-table structure. DynamoDB uses single-table structure, and it's optimized for fast key value and document-based storage. It's limited to secondary indexes for querying as well. Here's an example of what a DynamoDB table looks like. As you can see, it is just one singular table. All of the data is sorted via this primary key and the sorting key right here. This is an example of the MongoDB table. As you can see, they're all connected via holding each other's IDs. As you can see, the customer ID right here is held in the orders customer ID field. All right, cloud-based development principles. Well, elasticity is a very big part of cloud. This is where the cloud will scale up and down depending on the actual utilization. And this brings us to our next topic, so pay-for-use model. As you can see right here, in a cloud environment, you only pay for what you use. As you can see, your consumption right here, you only pay for what you use. In a VM, you pay for a capacity, which means that all of this red is wasted usage that you're paying for. So what is autoscaling? Autoscaling is something that helps us to achieve the build consumption on this side. Users will connect to our website via the internet, where it will use a load balancer to scale up and down depending on demand. Next, we'll talk about securing the cloud application. So this is done through three main different ways, roles, policies, and API security. So how do we prevent access? So IAM roles and policies are used for granting permission for accessing cloud resources. Policies are attached to roles that specify what actions are denied on a particular resource. IAM is beneficial for developers since it gives an easy and centralized way to manage permissions, enabling multi-factor authentication means users are required to identify themselves through two or more factors. This usually consists of something they know like a password and something they have a code from an authenticator app. This is important because it mitigates the risk of credentials becoming compromised. Finally, applying least privileged principles means granting users and services the minimum permissions needed to perform the tasks. The advantage of this is to reduce the surface for attack by limiting access to resources. Additionally, this also mitigates the accidental or malicious misuse of privileges. Luckily, AWS has a tool called AWS IAM access analyzer to identify any overly permissive rules. Roles act as a container for permissions, as we mentioned earlier. Custom policies are another way to define permissions in AWS. While we didn't get to actually define them ourselves, Amazon provided them in the lab role right here. These policies that are attached to our role allowed us to read our CRUD commands on our Dynamo database through our Lambda functions. Finally, through API security, in order to secure the API with Lambda, you can enable TLS, IAM authorizers, and restrict private access. With connection between the Lambda and the database, you can opt for encrypting data transit using SSL and TLS, IAM, and using principle or least privilege, like I mentioned before. Finally, securing your cloud with connection between Lambda and S3 through bucket security policies like the one that we see right here. IAM role permissions and encrypting data. Thank you for watching. I hope everything made sense to you. We have gone over the containerization orchestration using Docker, using Docker Compose, the serverless cloud, Lambda functions, the S3 storage. We talked about the serverless API, and we also talked about DynamoDB and how it compares to MongoDB. We talked about the cloud-based development cycles, so pay for use and elasticity, and how to secure your cloud. I hope all of this makes sense and helps you. Thank you.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.0, "text": " Hello everyone, my name is Jesse Peterson and this is my CS470 Project 2 conference presentation.", "tokens": [50364, 2425, 1518, 11, 452, 1315, 307, 21895, 36943, 293, 341, 307, 452, 9460, 19, 5867, 9849, 568, 7586, 5860, 13, 50664], "temperature": 0.0, "avg_logprob": -0.20575436839350947, "compression_ratio": 1.6228373702422145, "no_speech_prob": 0.02281254343688488}, {"id": 1, "seek": 0, "start": 6.0, "end": 12.0, "text": " So getting on with it, we have our agenda here is going to be talking about containerization orchestration,", "tokens": [50664, 407, 1242, 322, 365, 309, 11, 321, 362, 527, 9829, 510, 307, 516, 281, 312, 1417, 466, 10129, 2144, 14161, 2405, 11, 50964], "temperature": 0.0, "avg_logprob": -0.20575436839350947, "compression_ratio": 1.6228373702422145, "no_speech_prob": 0.02281254343688488}, {"id": 2, "seek": 0, "start": 12.0, "end": 18.0, "text": " the serverless cloud, cloud-based development principles in securing your cloud application.", "tokens": [50964, 264, 7154, 1832, 4588, 11, 4588, 12, 6032, 3250, 9156, 294, 33640, 428, 4588, 3861, 13, 51264], "temperature": 0.0, "avg_logprob": -0.20575436839350947, "compression_ratio": 1.6228373702422145, "no_speech_prob": 0.02281254343688488}, {"id": 3, "seek": 0, "start": 18.0, "end": 22.0, "text": " So first, containerization and orchestration, the models we used.", "tokens": [51264, 407, 700, 11, 10129, 2144, 293, 14161, 2405, 11, 264, 5245, 321, 1143, 13, 51464], "temperature": 0.0, "avg_logprob": -0.20575436839350947, "compression_ratio": 1.6228373702422145, "no_speech_prob": 0.02281254343688488}, {"id": 4, "seek": 0, "start": 22.0, "end": 28.0, "text": " So we used the re-platforming model where we integrated Lambda functions, DynamoDB, and the API gateway.", "tokens": [51464, 407, 321, 1143, 264, 319, 12, 39975, 48610, 2316, 689, 321, 10919, 45691, 6828, 11, 22947, 78, 27735, 11, 293, 264, 9362, 28532, 13, 51764], "temperature": 0.0, "avg_logprob": -0.20575436839350947, "compression_ratio": 1.6228373702422145, "no_speech_prob": 0.02281254343688488}, {"id": 5, "seek": 2800, "start": 28.0, "end": 35.0, "text": " So on the other hand, there's lift and shift, which is where you will package a container in a Docker container", "tokens": [50364, 407, 322, 264, 661, 1011, 11, 456, 311, 5533, 293, 5513, 11, 597, 307, 689, 291, 486, 7372, 257, 10129, 294, 257, 33772, 10129, 50714], "temperature": 0.0, "avg_logprob": -0.11026759677463108, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.045237407088279724}, {"id": 6, "seek": 2800, "start": 35.0, "end": 42.0, "text": " and you will lift it into the cloud. This is usually done on legacy applications where refactoring is useless.", "tokens": [50714, 293, 291, 486, 5533, 309, 666, 264, 4588, 13, 639, 307, 2673, 1096, 322, 11711, 5821, 689, 1895, 578, 3662, 307, 14115, 13, 51064], "temperature": 0.0, "avg_logprob": -0.11026759677463108, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.045237407088279724}, {"id": 7, "seek": 2800, "start": 42.0, "end": 49.0, "text": " So re-platforming is where you slightly modify in order to take advantage of cloud managed services,", "tokens": [51064, 407, 319, 12, 39975, 48610, 307, 689, 291, 4748, 16927, 294, 1668, 281, 747, 5002, 295, 4588, 6453, 3328, 11, 51414], "temperature": 0.0, "avg_logprob": -0.11026759677463108, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.045237407088279724}, {"id": 8, "seek": 2800, "start": 49.0, "end": 54.0, "text": " for example, like our MongoDB and DynamoDB database.", "tokens": [51414, 337, 1365, 11, 411, 527, 48380, 27735, 293, 22947, 78, 27735, 8149, 13, 51664], "temperature": 0.0, "avg_logprob": -0.11026759677463108, "compression_ratio": 1.5932203389830508, "no_speech_prob": 0.045237407088279724}, {"id": 9, "seek": 5400, "start": 54.0, "end": 59.0, "text": " And refactoring is a much more extensive approach where the application is redesigned.", "tokens": [50364, 400, 1895, 578, 3662, 307, 257, 709, 544, 13246, 3109, 689, 264, 3861, 307, 16762, 16690, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10722054504766697, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.046206746250391006}, {"id": 10, "seek": 5400, "start": 59.0, "end": 69.0, "text": " This is usually to adopt the microservice architecture where the entire thing is broken down to take full utilization of the cloud.", "tokens": [50614, 639, 307, 2673, 281, 6878, 264, 15547, 25006, 9482, 689, 264, 2302, 551, 307, 5463, 760, 281, 747, 1577, 37074, 295, 264, 4588, 13, 51114], "temperature": 0.0, "avg_logprob": -0.10722054504766697, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.046206746250391006}, {"id": 11, "seek": 5400, "start": 69.0, "end": 74.0, "text": " So the tools used, we used two different tools here. We used Docker and Docker Compose.", "tokens": [51114, 407, 264, 3873, 1143, 11, 321, 1143, 732, 819, 3873, 510, 13, 492, 1143, 33772, 293, 33772, 6620, 541, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10722054504766697, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.046206746250391006}, {"id": 12, "seek": 5400, "start": 74.0, "end": 81.0, "text": " Docker helps to package applications with their dependencies and containers.", "tokens": [51364, 33772, 3665, 281, 7372, 5821, 365, 641, 36606, 293, 17089, 13, 51714], "temperature": 0.0, "avg_logprob": -0.10722054504766697, "compression_ratio": 1.6652173913043478, "no_speech_prob": 0.046206746250391006}, {"id": 13, "seek": 8100, "start": 81.0, "end": 87.0, "text": " One key feature is Docker's ability to build, ship, and run applications in isolated environments.", "tokens": [50364, 1485, 2141, 4111, 307, 33772, 311, 3485, 281, 1322, 11, 5374, 11, 293, 1190, 5821, 294, 14621, 12388, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06929318258695513, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.05767543241381645}, {"id": 14, "seek": 8100, "start": 87.0, "end": 92.0, "text": " This allows us to keep our dependencies from interacting with the host machine's dependencies,", "tokens": [50664, 639, 4045, 505, 281, 1066, 527, 36606, 490, 18017, 365, 264, 3975, 3479, 311, 36606, 11, 50914], "temperature": 0.0, "avg_logprob": -0.06929318258695513, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.05767543241381645}, {"id": 15, "seek": 8100, "start": 92.0, "end": 96.0, "text": " getting rid of the it works on my machine, but it doesn't work on yours issue.", "tokens": [50914, 1242, 3973, 295, 264, 309, 1985, 322, 452, 3479, 11, 457, 309, 1177, 380, 589, 322, 6342, 2734, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06929318258695513, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.05767543241381645}, {"id": 16, "seek": 8100, "start": 96.0, "end": 99.0, "text": " So we also use Docker Compose, which is a Docker tool.", "tokens": [51114, 407, 321, 611, 764, 33772, 6620, 541, 11, 597, 307, 257, 33772, 2290, 13, 51264], "temperature": 0.0, "avg_logprob": -0.06929318258695513, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.05767543241381645}, {"id": 17, "seek": 8100, "start": 99.0, "end": 104.0, "text": " It allows us to manage multi-container Docker applications.", "tokens": [51264, 467, 4045, 505, 281, 3067, 4825, 12, 9000, 491, 260, 33772, 5821, 13, 51514], "temperature": 0.0, "avg_logprob": -0.06929318258695513, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.05767543241381645}, {"id": 18, "seek": 8100, "start": 104.0, "end": 108.0, "text": " This is all done through a single Docker Compose file.", "tokens": [51514, 639, 307, 439, 1096, 807, 257, 2167, 33772, 6620, 541, 3991, 13, 51714], "temperature": 0.0, "avg_logprob": -0.06929318258695513, "compression_ratio": 1.7065637065637065, "no_speech_prob": 0.05767543241381645}, {"id": 19, "seek": 10800, "start": 108.0, "end": 110.0, "text": " So why should we use Docker Compose?", "tokens": [50364, 407, 983, 820, 321, 764, 33772, 6620, 541, 30, 50464], "temperature": 0.0, "avg_logprob": -0.06645549427379262, "compression_ratio": 1.43, "no_speech_prob": 0.001240884535945952}, {"id": 20, "seek": 10800, "start": 110.0, "end": 116.0, "text": " Well, it simplifies the multi-container applications via a single YAML file.", "tokens": [50464, 1042, 11, 309, 6883, 11221, 264, 4825, 12, 9000, 491, 260, 5821, 5766, 257, 2167, 398, 2865, 43, 3991, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06645549427379262, "compression_ratio": 1.43, "no_speech_prob": 0.001240884535945952}, {"id": 21, "seek": 10800, "start": 119.0, "end": 124.0, "text": " It's also nice for testing applications that use multiple services.", "tokens": [50914, 467, 311, 611, 1481, 337, 4997, 5821, 300, 764, 3866, 3328, 13, 51164], "temperature": 0.0, "avg_logprob": -0.06645549427379262, "compression_ratio": 1.43, "no_speech_prob": 0.001240884535945952}, {"id": 22, "seek": 10800, "start": 124.0, "end": 129.0, "text": " Like in our case, we use MongoDB to communicate with ours.", "tokens": [51164, 1743, 294, 527, 1389, 11, 321, 764, 48380, 27735, 281, 7890, 365, 11896, 13, 51414], "temperature": 0.0, "avg_logprob": -0.06645549427379262, "compression_ratio": 1.43, "no_speech_prob": 0.001240884535945952}, {"id": 23, "seek": 10800, "start": 129.0, "end": 133.0, "text": " And it's also very portable and reproducible.", "tokens": [51414, 400, 309, 311, 611, 588, 21800, 293, 11408, 32128, 13, 51614], "temperature": 0.0, "avg_logprob": -0.06645549427379262, "compression_ratio": 1.43, "no_speech_prob": 0.001240884535945952}, {"id": 24, "seek": 13300, "start": 133.0, "end": 140.0, "text": " You can upload your Compose file to a GitHub repo so your other developers can pull it.", "tokens": [50364, 509, 393, 6580, 428, 6620, 541, 3991, 281, 257, 23331, 49040, 370, 428, 661, 8849, 393, 2235, 309, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1034476402962562, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.1110028475522995}, {"id": 25, "seek": 13300, "start": 140.0, "end": 146.0, "text": " And it also runs on Windows, Mac OS, and Linux platforms so you can develop across any platform you prefer.", "tokens": [50714, 400, 309, 611, 6676, 322, 8591, 11, 5707, 12731, 11, 293, 18734, 9473, 370, 291, 393, 1499, 2108, 604, 3663, 291, 4382, 13, 51014], "temperature": 0.0, "avg_logprob": -0.1034476402962562, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.1110028475522995}, {"id": 26, "seek": 13300, "start": 146.0, "end": 148.0, "text": " So what's the serverless cloud?", "tokens": [51014, 407, 437, 311, 264, 7154, 1832, 4588, 30, 51114], "temperature": 0.0, "avg_logprob": -0.1034476402962562, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.1110028475522995}, {"id": 27, "seek": 13300, "start": 148.0, "end": 155.0, "text": " So the serverless cloud allows, has the advantage of allowing developers to write and deploy code", "tokens": [51114, 407, 264, 7154, 1832, 4588, 4045, 11, 575, 264, 5002, 295, 8293, 8849, 281, 2464, 293, 7274, 3089, 51464], "temperature": 0.0, "avg_logprob": -0.1034476402962562, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.1110028475522995}, {"id": 28, "seek": 13300, "start": 155.0, "end": 158.0, "text": " without worrying about managing their underlying infrastructure.", "tokens": [51464, 1553, 18788, 466, 11642, 641, 14217, 6896, 13, 51614], "temperature": 0.0, "avg_logprob": -0.1034476402962562, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.1110028475522995}, {"id": 29, "seek": 13300, "start": 158.0, "end": 162.0, "text": " Developers, this also creates faster development life cycles.", "tokens": [51614, 11442, 433, 11, 341, 611, 7829, 4663, 3250, 993, 17796, 13, 51814], "temperature": 0.0, "avg_logprob": -0.1034476402962562, "compression_ratio": 1.674074074074074, "no_speech_prob": 0.1110028475522995}, {"id": 30, "seek": 16200, "start": 162.0, "end": 167.0, "text": " This is mostly due to the elimination of the need for infrastructure setup.", "tokens": [50364, 639, 307, 5240, 3462, 281, 264, 29224, 295, 264, 643, 337, 6896, 8657, 13, 50614], "temperature": 0.0, "avg_logprob": -0.10777022233649866, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.001778843579813838}, {"id": 31, "seek": 16200, "start": 167.0, "end": 171.0, "text": " Serverless applications dynamically scale up and down depending on demand.", "tokens": [50614, 25684, 1832, 5821, 43492, 4373, 493, 293, 760, 5413, 322, 4733, 13, 50814], "temperature": 0.0, "avg_logprob": -0.10777022233649866, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.001778843579813838}, {"id": 32, "seek": 16200, "start": 171.0, "end": 179.0, "text": " And they reduce operational overhead since there is no need to manage or maintain physical service operating systems or containers, clusters.", "tokens": [50814, 400, 436, 5407, 16607, 19922, 1670, 456, 307, 572, 643, 281, 3067, 420, 6909, 4001, 2643, 7447, 3652, 420, 17089, 11, 23313, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10777022233649866, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.001778843579813838}, {"id": 33, "seek": 16200, "start": 179.0, "end": 182.0, "text": " So what is S3 storage then?", "tokens": [51214, 407, 437, 307, 318, 18, 6725, 550, 30, 51364], "temperature": 0.0, "avg_logprob": -0.10777022233649866, "compression_ratio": 1.5384615384615385, "no_speech_prob": 0.001778843579813838}, {"id": 34, "seek": 18200, "start": 182.0, "end": 194.0, "text": " So S3 storage, or a simplified storage service, is a cloud-based object storage service that is designed for scalability, durability, and accessibility.", "tokens": [50364, 407, 318, 18, 6725, 11, 420, 257, 26335, 6725, 2643, 11, 307, 257, 4588, 12, 6032, 2657, 6725, 2643, 300, 307, 4761, 337, 15664, 2310, 11, 33664, 11, 293, 15002, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08312016499193409, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.013282211497426033}, {"id": 35, "seek": 18200, "start": 194.0, "end": 199.0, "text": " S3 is a managed service where AWS handles infrastructure and everything.", "tokens": [50964, 318, 18, 307, 257, 6453, 2643, 689, 17650, 18722, 6896, 293, 1203, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08312016499193409, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.013282211497426033}, {"id": 36, "seek": 18200, "start": 199.0, "end": 207.0, "text": " With a significant amount of AWS data centers, this allows your data to be replicated to other regions, making it highly available and accessible.", "tokens": [51214, 2022, 257, 4776, 2372, 295, 17650, 1412, 10898, 11, 341, 4045, 428, 1412, 281, 312, 46365, 281, 661, 10682, 11, 1455, 309, 5405, 2435, 293, 9515, 13, 51614], "temperature": 0.0, "avg_logprob": -0.08312016499193409, "compression_ratio": 1.6387665198237886, "no_speech_prob": 0.013282211497426033}, {"id": 37, "seek": 20700, "start": 207.0, "end": 215.0, "text": " On the other hand, local storage is limited to physical hardware, whereas cloud storage is not limited unless it's the price of the storage.", "tokens": [50364, 1282, 264, 661, 1011, 11, 2654, 6725, 307, 5567, 281, 4001, 8837, 11, 9735, 4588, 6725, 307, 406, 5567, 5969, 309, 311, 264, 3218, 295, 264, 6725, 13, 50764], "temperature": 0.0, "avg_logprob": -0.058273025587493296, "compression_ratio": 1.6156716417910448, "no_speech_prob": 0.18539930880069733}, {"id": 38, "seek": 20700, "start": 215.0, "end": 220.0, "text": " Finally, as mentioned earlier, local storage has no built-in remote accessibility.", "tokens": [50764, 6288, 11, 382, 2835, 3071, 11, 2654, 6725, 575, 572, 3094, 12, 259, 8607, 15002, 13, 51014], "temperature": 0.0, "avg_logprob": -0.058273025587493296, "compression_ratio": 1.6156716417910448, "no_speech_prob": 0.18539930880069733}, {"id": 39, "seek": 20700, "start": 220.0, "end": 225.0, "text": " Having an engineer come in to open your network up can lead to some vulnerabilities.", "tokens": [51014, 10222, 364, 11403, 808, 294, 281, 1269, 428, 3209, 493, 393, 1477, 281, 512, 37633, 13, 51264], "temperature": 0.0, "avg_logprob": -0.058273025587493296, "compression_ratio": 1.6156716417910448, "no_speech_prob": 0.18539930880069733}, {"id": 40, "seek": 20700, "start": 225.0, "end": 228.0, "text": " This is an example of what serverless looks like.", "tokens": [51264, 639, 307, 364, 1365, 295, 437, 7154, 1832, 1542, 411, 13, 51414], "temperature": 0.0, "avg_logprob": -0.058273025587493296, "compression_ratio": 1.6156716417910448, "no_speech_prob": 0.18539930880069733}, {"id": 41, "seek": 20700, "start": 228.0, "end": 231.0, "text": " A user would connect to the API.", "tokens": [51414, 316, 4195, 576, 1745, 281, 264, 9362, 13, 51564], "temperature": 0.0, "avg_logprob": -0.058273025587493296, "compression_ratio": 1.6156716417910448, "no_speech_prob": 0.18539930880069733}, {"id": 42, "seek": 20700, "start": 231.0, "end": 233.0, "text": " The API would route to a Lambda function.", "tokens": [51564, 440, 9362, 576, 7955, 281, 257, 45691, 2445, 13, 51664], "temperature": 0.0, "avg_logprob": -0.058273025587493296, "compression_ratio": 1.6156716417910448, "no_speech_prob": 0.18539930880069733}, {"id": 43, "seek": 23300, "start": 233.0, "end": 239.0, "text": " The Lambda function would grab the data that it needs from the database, and then it would bring it back to the user.", "tokens": [50364, 440, 45691, 2445, 576, 4444, 264, 1412, 300, 309, 2203, 490, 264, 8149, 11, 293, 550, 309, 576, 1565, 309, 646, 281, 264, 4195, 13, 50664], "temperature": 0.0, "avg_logprob": -0.07500884556534267, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.2568432688713074}, {"id": 44, "seek": 23300, "start": 239.0, "end": 246.0, "text": " This would scale up and down through this elastic hash model, depending on how many people are accessing the data.", "tokens": [50664, 639, 576, 4373, 493, 293, 760, 807, 341, 17115, 22019, 2316, 11, 5413, 322, 577, 867, 561, 366, 26440, 264, 1412, 13, 51014], "temperature": 0.0, "avg_logprob": -0.07500884556534267, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.2568432688713074}, {"id": 45, "seek": 23300, "start": 246.0, "end": 249.0, "text": " So going on to the serverless API.", "tokens": [51014, 407, 516, 322, 281, 264, 7154, 1832, 9362, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07500884556534267, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.2568432688713074}, {"id": 46, "seek": 23300, "start": 249.0, "end": 254.0, "text": " When using a serverless API, there is no server management required.", "tokens": [51164, 1133, 1228, 257, 7154, 1832, 9362, 11, 456, 307, 572, 7154, 4592, 4739, 13, 51414], "temperature": 0.0, "avg_logprob": -0.07500884556534267, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.2568432688713074}, {"id": 47, "seek": 23300, "start": 254.0, "end": 261.0, "text": " This enables developers to focus on writing and deploying an application without worrying about configuration of the network.", "tokens": [51414, 639, 17077, 8849, 281, 1879, 322, 3579, 293, 34198, 364, 3861, 1553, 18788, 466, 11694, 295, 264, 3209, 13, 51764], "temperature": 0.0, "avg_logprob": -0.07500884556534267, "compression_ratio": 1.7174721189591078, "no_speech_prob": 0.2568432688713074}, {"id": 48, "seek": 26100, "start": 261.0, "end": 271.0, "text": " Serverless APIs dynamically scale depending on the number of requests, high availability during traffic spikes, and helps to prevent resource usage during low demand.", "tokens": [50364, 25684, 1832, 21445, 43492, 4373, 5413, 322, 264, 1230, 295, 12475, 11, 1090, 17945, 1830, 6419, 28997, 11, 293, 3665, 281, 4871, 7684, 14924, 1830, 2295, 4733, 13, 50864], "temperature": 0.0, "avg_logprob": -0.06961266391248588, "compression_ratio": 1.592, "no_speech_prob": 0.01377599686384201}, {"id": 49, "seek": 26100, "start": 271.0, "end": 278.0, "text": " The cost is greatly reduced since you are built only on the actual utilization and not idle time.", "tokens": [50864, 440, 2063, 307, 14147, 9212, 1670, 291, 366, 3094, 787, 322, 264, 3539, 37074, 293, 406, 30650, 565, 13, 51214], "temperature": 0.0, "avg_logprob": -0.06961266391248588, "compression_ratio": 1.592, "no_speech_prob": 0.01377599686384201}, {"id": 50, "seek": 26100, "start": 278.0, "end": 281.0, "text": " So what are Lambda functions then?", "tokens": [51214, 407, 437, 366, 45691, 6828, 550, 30, 51364], "temperature": 0.0, "avg_logprob": -0.06961266391248588, "compression_ratio": 1.592, "no_speech_prob": 0.01377599686384201}, {"id": 51, "seek": 26100, "start": 281.0, "end": 289.0, "text": " Lambda function is a serverless service that runs code in response to events such as API requests.", "tokens": [51364, 45691, 2445, 307, 257, 7154, 1832, 2643, 300, 6676, 3089, 294, 4134, 281, 3931, 1270, 382, 9362, 12475, 13, 51764], "temperature": 0.0, "avg_logprob": -0.06961266391248588, "compression_ratio": 1.592, "no_speech_prob": 0.01377599686384201}, {"id": 52, "seek": 28900, "start": 289.0, "end": 294.0, "text": " Each function is designed to handle a specific task such as a CRUD operation.", "tokens": [50364, 6947, 2445, 307, 4761, 281, 4813, 257, 2685, 5633, 1270, 382, 257, 14123, 9438, 6916, 13, 50614], "temperature": 0.0, "avg_logprob": -0.11895881112166277, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.013929953798651695}, {"id": 53, "seek": 28900, "start": 294.0, "end": 299.0, "text": " In the API, this would be post, get, put, or patch, and delete.", "tokens": [50614, 682, 264, 9362, 11, 341, 576, 312, 2183, 11, 483, 11, 829, 11, 420, 9972, 11, 293, 12097, 13, 50864], "temperature": 0.0, "avg_logprob": -0.11895881112166277, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.013929953798651695}, {"id": 54, "seek": 28900, "start": 299.0, "end": 304.0, "text": " Lambda functions have high integrations with other backend services like DynamoDB and S3.", "tokens": [50864, 45691, 6828, 362, 1090, 3572, 763, 365, 661, 38087, 3328, 411, 22947, 78, 27735, 293, 318, 18, 13, 51114], "temperature": 0.0, "avg_logprob": -0.11895881112166277, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.013929953798651695}, {"id": 55, "seek": 28900, "start": 304.0, "end": 312.0, "text": " And if you wanted to create a front-end and back-end website, you would first deploy the Lambda function and configure API gateway routes.", "tokens": [51114, 400, 498, 291, 1415, 281, 1884, 257, 1868, 12, 521, 293, 646, 12, 521, 3144, 11, 291, 576, 700, 7274, 264, 45691, 2445, 293, 22162, 9362, 28532, 18242, 13, 51514], "temperature": 0.0, "avg_logprob": -0.11895881112166277, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.013929953798651695}, {"id": 56, "seek": 28900, "start": 312.0, "end": 314.0, "text": " Then you would use S3 for hosting the front-end.", "tokens": [51514, 1396, 291, 576, 764, 318, 18, 337, 16058, 264, 1868, 12, 521, 13, 51614], "temperature": 0.0, "avg_logprob": -0.11895881112166277, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.013929953798651695}, {"id": 57, "seek": 28900, "start": 314.0, "end": 318.0, "text": " And third, you could use CORS to enable communication between front and back-ends.", "tokens": [51614, 400, 2636, 11, 291, 727, 764, 43137, 50, 281, 9528, 6101, 1296, 1868, 293, 646, 12, 2581, 13, 51814], "temperature": 0.0, "avg_logprob": -0.11895881112166277, "compression_ratio": 1.6622516556291391, "no_speech_prob": 0.013929953798651695}, {"id": 58, "seek": 31800, "start": 318.0, "end": 324.0, "text": " And lastly, you'd want to make sure you secure your API endpoints with authentication.", "tokens": [50364, 400, 16386, 11, 291, 1116, 528, 281, 652, 988, 291, 7144, 428, 9362, 917, 20552, 365, 26643, 13, 50664], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 59, "seek": 31800, "start": 324.0, "end": 325.0, "text": " How does the gateway work?", "tokens": [50664, 1012, 775, 264, 28532, 589, 30, 50714], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 60, "seek": 31800, "start": 325.0, "end": 326.0, "text": " Well, here's an example.", "tokens": [50714, 1042, 11, 510, 311, 364, 1365, 13, 50764], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 61, "seek": 31800, "start": 326.0, "end": 330.0, "text": " So users would connect to the API gateway, and then it would connect to the backend.", "tokens": [50764, 407, 5022, 576, 1745, 281, 264, 9362, 28532, 11, 293, 550, 309, 576, 1745, 281, 264, 38087, 13, 50964], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 62, "seek": 31800, "start": 330.0, "end": 333.0, "text": " The backend would grab the data and bring it back to the user.", "tokens": [50964, 440, 38087, 576, 4444, 264, 1412, 293, 1565, 309, 646, 281, 264, 4195, 13, 51114], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 63, "seek": 31800, "start": 333.0, "end": 340.0, "text": " Alternatively, internal developers can access the backend directly to manage anything that they need to.", "tokens": [51114, 46167, 11, 6920, 8849, 393, 2105, 264, 38087, 3838, 281, 3067, 1340, 300, 436, 643, 281, 13, 51464], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 64, "seek": 31800, "start": 340.0, "end": 344.0, "text": " Now we'll talk about MongoDB versus DynamoDB.", "tokens": [51464, 823, 321, 603, 751, 466, 48380, 27735, 5717, 22947, 78, 27735, 13, 51664], "temperature": 0.0, "avg_logprob": -0.06522613984567148, "compression_ratio": 1.649056603773585, "no_speech_prob": 0.004368597641587257}, {"id": 65, "seek": 34400, "start": 344.0, "end": 348.0, "text": " So MongoDB has a very flexible document-based schema.", "tokens": [50364, 407, 48380, 27735, 575, 257, 588, 11358, 4166, 12, 6032, 34078, 13, 50564], "temperature": 0.0, "avg_logprob": -0.09055877199359968, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.4457126259803772}, {"id": 66, "seek": 34400, "start": 348.0, "end": 352.0, "text": " It uses a JSON-like BSON format.", "tokens": [50564, 467, 4960, 257, 31828, 12, 4092, 363, 10388, 7877, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09055877199359968, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.4457126259803772}, {"id": 67, "seek": 34400, "start": 352.0, "end": 358.0, "text": " It allows for rich querying capabilities like geospatial queries, indexing, and text search.", "tokens": [50764, 467, 4045, 337, 4593, 7083, 1840, 10862, 411, 1519, 2763, 267, 831, 24109, 11, 8186, 278, 11, 293, 2487, 3164, 13, 51064], "temperature": 0.0, "avg_logprob": -0.09055877199359968, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.4457126259803772}, {"id": 68, "seek": 34400, "start": 358.0, "end": 365.0, "text": " This also allows for the filtering, sorting, and aggregation operations.", "tokens": [51064, 639, 611, 4045, 337, 264, 30822, 11, 32411, 11, 293, 16743, 399, 7705, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09055877199359968, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.4457126259803772}, {"id": 69, "seek": 34400, "start": 365.0, "end": 367.0, "text": " It uses a multi-table structure.", "tokens": [51414, 467, 4960, 257, 4825, 12, 23811, 3877, 13, 51514], "temperature": 0.0, "avg_logprob": -0.09055877199359968, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.4457126259803772}, {"id": 70, "seek": 34400, "start": 367.0, "end": 373.0, "text": " DynamoDB uses single-table structure, and it's optimized for fast key value and document-based storage.", "tokens": [51514, 22947, 78, 27735, 4960, 2167, 12, 23811, 3877, 11, 293, 309, 311, 26941, 337, 2370, 2141, 2158, 293, 4166, 12, 6032, 6725, 13, 51814], "temperature": 0.0, "avg_logprob": -0.09055877199359968, "compression_ratio": 1.6276150627615062, "no_speech_prob": 0.4457126259803772}, {"id": 71, "seek": 37300, "start": 373.0, "end": 378.0, "text": " It's limited to secondary indexes for querying as well.", "tokens": [50364, 467, 311, 5567, 281, 11396, 8186, 279, 337, 7083, 1840, 382, 731, 13, 50614], "temperature": 0.0, "avg_logprob": -0.04754939675331116, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.002443973906338215}, {"id": 72, "seek": 37300, "start": 378.0, "end": 382.0, "text": " Here's an example of what a DynamoDB table looks like.", "tokens": [50614, 1692, 311, 364, 1365, 295, 437, 257, 22947, 78, 27735, 3199, 1542, 411, 13, 50814], "temperature": 0.0, "avg_logprob": -0.04754939675331116, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.002443973906338215}, {"id": 73, "seek": 37300, "start": 382.0, "end": 385.0, "text": " As you can see, it is just one singular table.", "tokens": [50814, 1018, 291, 393, 536, 11, 309, 307, 445, 472, 20010, 3199, 13, 50964], "temperature": 0.0, "avg_logprob": -0.04754939675331116, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.002443973906338215}, {"id": 74, "seek": 37300, "start": 385.0, "end": 391.0, "text": " All of the data is sorted via this primary key and the sorting key right here.", "tokens": [50964, 1057, 295, 264, 1412, 307, 25462, 5766, 341, 6194, 2141, 293, 264, 32411, 2141, 558, 510, 13, 51264], "temperature": 0.0, "avg_logprob": -0.04754939675331116, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.002443973906338215}, {"id": 75, "seek": 37300, "start": 391.0, "end": 394.0, "text": " This is an example of the MongoDB table.", "tokens": [51264, 639, 307, 364, 1365, 295, 264, 48380, 27735, 3199, 13, 51414], "temperature": 0.0, "avg_logprob": -0.04754939675331116, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.002443973906338215}, {"id": 76, "seek": 37300, "start": 394.0, "end": 398.0, "text": " As you can see, they're all connected via holding each other's IDs.", "tokens": [51414, 1018, 291, 393, 536, 11, 436, 434, 439, 4582, 5766, 5061, 1184, 661, 311, 48212, 13, 51614], "temperature": 0.0, "avg_logprob": -0.04754939675331116, "compression_ratio": 1.6046511627906976, "no_speech_prob": 0.002443973906338215}, {"id": 77, "seek": 39800, "start": 398.0, "end": 403.0, "text": " As you can see, the customer ID right here is held in the orders customer ID field.", "tokens": [50364, 1018, 291, 393, 536, 11, 264, 5474, 7348, 558, 510, 307, 5167, 294, 264, 9470, 5474, 7348, 2519, 13, 50614], "temperature": 0.0, "avg_logprob": -0.09662243105330558, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.5545135736465454}, {"id": 78, "seek": 39800, "start": 403.0, "end": 406.0, "text": " All right, cloud-based development principles.", "tokens": [50614, 1057, 558, 11, 4588, 12, 6032, 3250, 9156, 13, 50764], "temperature": 0.0, "avg_logprob": -0.09662243105330558, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.5545135736465454}, {"id": 79, "seek": 39800, "start": 406.0, "end": 408.0, "text": " Well, elasticity is a very big part of cloud.", "tokens": [50764, 1042, 11, 46260, 307, 257, 588, 955, 644, 295, 4588, 13, 50864], "temperature": 0.0, "avg_logprob": -0.09662243105330558, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.5545135736465454}, {"id": 80, "seek": 39800, "start": 408.0, "end": 415.0, "text": " This is where the cloud will scale up and down depending on the actual utilization.", "tokens": [50864, 639, 307, 689, 264, 4588, 486, 4373, 493, 293, 760, 5413, 322, 264, 3539, 37074, 13, 51214], "temperature": 0.0, "avg_logprob": -0.09662243105330558, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.5545135736465454}, {"id": 81, "seek": 39800, "start": 415.0, "end": 419.0, "text": " And this brings us to our next topic, so pay-for-use model.", "tokens": [51214, 400, 341, 5607, 505, 281, 527, 958, 4829, 11, 370, 1689, 12, 2994, 12, 438, 2316, 13, 51414], "temperature": 0.0, "avg_logprob": -0.09662243105330558, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.5545135736465454}, {"id": 82, "seek": 39800, "start": 419.0, "end": 425.0, "text": " As you can see right here, in a cloud environment, you only pay for what you use.", "tokens": [51414, 1018, 291, 393, 536, 558, 510, 11, 294, 257, 4588, 2823, 11, 291, 787, 1689, 337, 437, 291, 764, 13, 51714], "temperature": 0.0, "avg_logprob": -0.09662243105330558, "compression_ratio": 1.6209677419354838, "no_speech_prob": 0.5545135736465454}, {"id": 83, "seek": 42500, "start": 425.0, "end": 428.0, "text": " As you can see, your consumption right here, you only pay for what you use.", "tokens": [50364, 1018, 291, 393, 536, 11, 428, 12126, 558, 510, 11, 291, 787, 1689, 337, 437, 291, 764, 13, 50514], "temperature": 0.0, "avg_logprob": -0.08186675454968605, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.12520788609981537}, {"id": 84, "seek": 42500, "start": 428.0, "end": 436.0, "text": " In a VM, you pay for a capacity, which means that all of this red is wasted usage that you're paying for.", "tokens": [50514, 682, 257, 18038, 11, 291, 1689, 337, 257, 6042, 11, 597, 1355, 300, 439, 295, 341, 2182, 307, 19496, 14924, 300, 291, 434, 6229, 337, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08186675454968605, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.12520788609981537}, {"id": 85, "seek": 42500, "start": 436.0, "end": 438.0, "text": " So what is autoscaling?", "tokens": [50914, 407, 437, 307, 1476, 10466, 4270, 30, 51014], "temperature": 0.0, "avg_logprob": -0.08186675454968605, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.12520788609981537}, {"id": 86, "seek": 42500, "start": 438.0, "end": 444.0, "text": " Autoscaling is something that helps us to achieve the build consumption on this side.", "tokens": [51014, 6049, 10466, 4270, 307, 746, 300, 3665, 505, 281, 4584, 264, 1322, 12126, 322, 341, 1252, 13, 51314], "temperature": 0.0, "avg_logprob": -0.08186675454968605, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.12520788609981537}, {"id": 87, "seek": 42500, "start": 444.0, "end": 452.0, "text": " Users will connect to our website via the internet, where it will use a load balancer to scale up and down depending on demand.", "tokens": [51314, 47092, 486, 1745, 281, 527, 3144, 5766, 264, 4705, 11, 689, 309, 486, 764, 257, 3677, 3119, 28347, 281, 4373, 493, 293, 760, 5413, 322, 4733, 13, 51714], "temperature": 0.0, "avg_logprob": -0.08186675454968605, "compression_ratio": 1.6561264822134387, "no_speech_prob": 0.12520788609981537}, {"id": 88, "seek": 45200, "start": 452.0, "end": 455.0, "text": " Next, we'll talk about securing the cloud application.", "tokens": [50364, 3087, 11, 321, 603, 751, 466, 33640, 264, 4588, 3861, 13, 50514], "temperature": 0.0, "avg_logprob": -0.07184818211723776, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.4128713309764862}, {"id": 89, "seek": 45200, "start": 455.0, "end": 460.0, "text": " So this is done through three main different ways, roles, policies, and API security.", "tokens": [50514, 407, 341, 307, 1096, 807, 1045, 2135, 819, 2098, 11, 9604, 11, 7657, 11, 293, 9362, 3825, 13, 50764], "temperature": 0.0, "avg_logprob": -0.07184818211723776, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.4128713309764862}, {"id": 90, "seek": 45200, "start": 460.0, "end": 461.0, "text": " So how do we prevent access?", "tokens": [50764, 407, 577, 360, 321, 4871, 2105, 30, 50814], "temperature": 0.0, "avg_logprob": -0.07184818211723776, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.4128713309764862}, {"id": 91, "seek": 45200, "start": 461.0, "end": 468.0, "text": " So IAM roles and policies are used for granting permission for accessing cloud resources.", "tokens": [50814, 407, 286, 2865, 9604, 293, 7657, 366, 1143, 337, 50204, 11226, 337, 26440, 4588, 3593, 13, 51164], "temperature": 0.0, "avg_logprob": -0.07184818211723776, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.4128713309764862}, {"id": 92, "seek": 45200, "start": 468.0, "end": 474.0, "text": " Policies are attached to roles that specify what actions are denied on a particular resource.", "tokens": [51164, 3635, 299, 530, 366, 8570, 281, 9604, 300, 16500, 437, 5909, 366, 17774, 322, 257, 1729, 7684, 13, 51464], "temperature": 0.0, "avg_logprob": -0.07184818211723776, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.4128713309764862}, {"id": 93, "seek": 45200, "start": 474.0, "end": 480.0, "text": " IAM is beneficial for developers since it gives an easy and centralized way to manage permissions,", "tokens": [51464, 286, 2865, 307, 14072, 337, 8849, 1670, 309, 2709, 364, 1858, 293, 32395, 636, 281, 3067, 32723, 11, 51764], "temperature": 0.0, "avg_logprob": -0.07184818211723776, "compression_ratio": 1.661764705882353, "no_speech_prob": 0.4128713309764862}, {"id": 94, "seek": 48000, "start": 480.0, "end": 487.0, "text": " enabling multi-factor authentication means users are required to identify themselves through two or more factors.", "tokens": [50364, 23148, 4825, 12, 69, 15104, 26643, 1355, 5022, 366, 4739, 281, 5876, 2969, 807, 732, 420, 544, 6771, 13, 50714], "temperature": 0.0, "avg_logprob": -0.08129142873427447, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.06624026596546173}, {"id": 95, "seek": 48000, "start": 487.0, "end": 492.0, "text": " This usually consists of something they know like a password and something they have a code from an authenticator app.", "tokens": [50714, 639, 2673, 14689, 295, 746, 436, 458, 411, 257, 11524, 293, 746, 436, 362, 257, 3089, 490, 364, 12466, 1639, 724, 13, 50964], "temperature": 0.0, "avg_logprob": -0.08129142873427447, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.06624026596546173}, {"id": 96, "seek": 48000, "start": 492.0, "end": 497.0, "text": " This is important because it mitigates the risk of credentials becoming compromised.", "tokens": [50964, 639, 307, 1021, 570, 309, 15699, 1024, 264, 3148, 295, 27404, 5617, 32463, 13, 51214], "temperature": 0.0, "avg_logprob": -0.08129142873427447, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.06624026596546173}, {"id": 97, "seek": 48000, "start": 497.0, "end": 504.0, "text": " Finally, applying least privileged principles means granting users and services the minimum permissions needed to perform the tasks.", "tokens": [51214, 6288, 11, 9275, 1935, 25293, 9156, 1355, 50204, 5022, 293, 3328, 264, 7285, 32723, 2978, 281, 2042, 264, 9608, 13, 51564], "temperature": 0.0, "avg_logprob": -0.08129142873427447, "compression_ratio": 1.6917293233082706, "no_speech_prob": 0.06624026596546173}, {"id": 98, "seek": 50400, "start": 504.0, "end": 510.0, "text": " The advantage of this is to reduce the surface for attack by limiting access to resources.", "tokens": [50364, 440, 5002, 295, 341, 307, 281, 5407, 264, 3753, 337, 2690, 538, 22083, 2105, 281, 3593, 13, 50664], "temperature": 0.0, "avg_logprob": -0.08168294490912022, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.2064269781112671}, {"id": 99, "seek": 50400, "start": 510.0, "end": 515.0, "text": " Additionally, this also mitigates the accidental or malicious misuse of privileges.", "tokens": [50664, 19927, 11, 341, 611, 15699, 1024, 264, 38094, 420, 33496, 3346, 438, 295, 32588, 13, 50914], "temperature": 0.0, "avg_logprob": -0.08168294490912022, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.2064269781112671}, {"id": 100, "seek": 50400, "start": 515.0, "end": 522.0, "text": " Luckily, AWS has a tool called AWS IAM access analyzer to identify any overly permissive rules.", "tokens": [50914, 19726, 11, 17650, 575, 257, 2290, 1219, 17650, 286, 2865, 2105, 6459, 4527, 281, 5876, 604, 24324, 4784, 891, 488, 4474, 13, 51264], "temperature": 0.0, "avg_logprob": -0.08168294490912022, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.2064269781112671}, {"id": 101, "seek": 50400, "start": 522.0, "end": 527.0, "text": " Roles act as a container for permissions, as we mentioned earlier.", "tokens": [51264, 497, 7456, 605, 382, 257, 10129, 337, 32723, 11, 382, 321, 2835, 3071, 13, 51514], "temperature": 0.0, "avg_logprob": -0.08168294490912022, "compression_ratio": 1.5458715596330275, "no_speech_prob": 0.2064269781112671}, {"id": 102, "seek": 52700, "start": 528.0, "end": 534.0, "text": " Custom policies are another way to define permissions in AWS.", "tokens": [50414, 16649, 7657, 366, 1071, 636, 281, 6964, 32723, 294, 17650, 13, 50714], "temperature": 0.0, "avg_logprob": -0.10013142551284239, "compression_ratio": 1.5523012552301256, "no_speech_prob": 0.3595926761627197}, {"id": 103, "seek": 52700, "start": 534.0, "end": 540.0, "text": " While we didn't get to actually define them ourselves, Amazon provided them in the lab role right here.", "tokens": [50714, 3987, 321, 994, 380, 483, 281, 767, 6964, 552, 4175, 11, 6795, 5649, 552, 294, 264, 2715, 3090, 558, 510, 13, 51014], "temperature": 0.0, "avg_logprob": -0.10013142551284239, "compression_ratio": 1.5523012552301256, "no_speech_prob": 0.3595926761627197}, {"id": 104, "seek": 52700, "start": 540.0, "end": 548.0, "text": " These policies that are attached to our role allowed us to read our CRUD commands on our Dynamo database through our Lambda functions.", "tokens": [51014, 1981, 7657, 300, 366, 8570, 281, 527, 3090, 4350, 505, 281, 1401, 527, 14123, 9438, 16901, 322, 527, 22947, 78, 8149, 807, 527, 45691, 6828, 13, 51414], "temperature": 0.0, "avg_logprob": -0.10013142551284239, "compression_ratio": 1.5523012552301256, "no_speech_prob": 0.3595926761627197}, {"id": 105, "seek": 52700, "start": 548.0, "end": 554.0, "text": " Finally, through API security, in order to secure the API with Lambda,", "tokens": [51414, 6288, 11, 807, 9362, 3825, 11, 294, 1668, 281, 7144, 264, 9362, 365, 45691, 11, 51714], "temperature": 0.0, "avg_logprob": -0.10013142551284239, "compression_ratio": 1.5523012552301256, "no_speech_prob": 0.3595926761627197}, {"id": 106, "seek": 55400, "start": 554.0, "end": 559.0, "text": " you can enable TLS, IAM authorizers, and restrict private access.", "tokens": [50364, 291, 393, 9528, 314, 19198, 11, 286, 2865, 3793, 22525, 11, 293, 7694, 4551, 2105, 13, 50614], "temperature": 0.0, "avg_logprob": -0.19105638996247323, "compression_ratio": 1.4529411764705882, "no_speech_prob": 0.10021631419658661}, {"id": 107, "seek": 55400, "start": 559.0, "end": 574.0, "text": " With connection between the Lambda and the database, you can opt for encrypting data transit using SSL and TLS, IAM, and using principle or least privilege, like I mentioned before.", "tokens": [50614, 2022, 4984, 1296, 264, 45691, 293, 264, 8149, 11, 291, 393, 2427, 337, 17972, 662, 278, 1412, 17976, 1228, 12238, 43, 293, 314, 19198, 11, 286, 2865, 11, 293, 1228, 8665, 420, 1935, 12122, 11, 411, 286, 2835, 949, 13, 51364], "temperature": 0.0, "avg_logprob": -0.19105638996247323, "compression_ratio": 1.4529411764705882, "no_speech_prob": 0.10021631419658661}, {"id": 108, "seek": 57400, "start": 574.0, "end": 581.0, "text": " Finally, securing your cloud with connection between Lambda and S3 through bucket security policies like the one that we see right here.", "tokens": [50364, 6288, 11, 33640, 428, 4588, 365, 4984, 1296, 45691, 293, 318, 18, 807, 13058, 3825, 7657, 411, 264, 472, 300, 321, 536, 558, 510, 13, 50714], "temperature": 0.0, "avg_logprob": -0.1425166671926325, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.14532096683979034}, {"id": 109, "seek": 57400, "start": 581.0, "end": 585.0, "text": " IAM role permissions and encrypting data.", "tokens": [50714, 286, 2865, 3090, 32723, 293, 17972, 662, 278, 1412, 13, 50914], "temperature": 0.0, "avg_logprob": -0.1425166671926325, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.14532096683979034}, {"id": 110, "seek": 57400, "start": 585.0, "end": 590.0, "text": " Thank you for watching. I hope everything made sense to you.", "tokens": [50914, 1044, 291, 337, 1976, 13, 286, 1454, 1203, 1027, 2020, 281, 291, 13, 51164], "temperature": 0.0, "avg_logprob": -0.1425166671926325, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.14532096683979034}, {"id": 111, "seek": 57400, "start": 590.0, "end": 602.0, "text": " We have gone over the containerization orchestration using Docker, using Docker Compose, the serverless cloud, Lambda functions, the S3 storage.", "tokens": [51164, 492, 362, 2780, 670, 264, 10129, 2144, 14161, 2405, 1228, 33772, 11, 1228, 33772, 6620, 541, 11, 264, 7154, 1832, 4588, 11, 45691, 6828, 11, 264, 318, 18, 6725, 13, 51764], "temperature": 0.0, "avg_logprob": -0.1425166671926325, "compression_ratio": 1.5546558704453441, "no_speech_prob": 0.14532096683979034}, {"id": 112, "seek": 60200, "start": 602.0, "end": 610.0, "text": " We talked about the serverless API, and we also talked about DynamoDB and how it compares to MongoDB.", "tokens": [50364, 492, 2825, 466, 264, 7154, 1832, 9362, 11, 293, 321, 611, 2825, 466, 22947, 78, 27735, 293, 577, 309, 38334, 281, 48380, 27735, 13, 50764], "temperature": 0.0, "avg_logprob": -0.10620654838672583, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.19078469276428223}, {"id": 113, "seek": 60200, "start": 610.0, "end": 619.0, "text": " We talked about the cloud-based development cycles, so pay for use and elasticity, and how to secure your cloud.", "tokens": [50764, 492, 2825, 466, 264, 4588, 12, 6032, 3250, 17796, 11, 370, 1689, 337, 764, 293, 46260, 11, 293, 577, 281, 7144, 428, 4588, 13, 51214], "temperature": 0.0, "avg_logprob": -0.10620654838672583, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.19078469276428223}, {"id": 114, "seek": 60200, "start": 619.0, "end": 622.0, "text": " I hope all of this makes sense and helps you. Thank you.", "tokens": [51214, 286, 1454, 439, 295, 341, 1669, 2020, 293, 3665, 291, 13, 1044, 291, 13, 51364], "temperature": 0.0, "avg_logprob": -0.10620654838672583, "compression_ratio": 1.5055555555555555, "no_speech_prob": 0.19078469276428223}], "language": "en"}